---
import Navbar from "../pages/navbar.astro";
import Footer from "../pages/footer.astro";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="#" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="/styles/global.css" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Süha Tanrıverdi</title>
  </head>
  <body
    class="text-[#195358] dark:bg-[#121212] dark:text-cyan-50 dark:[text-shadow:_0_0_20px_rgba(255_255_255_/_0.25)] flex flex-col items-center h-[calc(100vh-70px)]"
  >
    <Navbar />
    <slot />
    <Footer />
  </body>
</html>

<script>
  const darkThemeMq = window.matchMedia("(prefers-color-scheme: dark)");
  darkThemeMq.addEventListener("change", () => {
    toggleTheme();
    updateButtonVisibility();
  });

  // On page load or when changing themes, best to add inline in `head` to avoid FOUC
  if (
    localStorage.theme === "dark" ||
    (!("theme" in localStorage) && darkThemeMq.matches)
  ) {
    document.documentElement.classList.add("dark");
  } else {
    document.documentElement.classList.remove("dark");
  }

  // // // Whenever the user explicitly chooses light mode
  // // localStorage.theme = "light";

  // // // Whenever the user explicitly chooses dark mode
  // // localStorage.theme = "dark";

  // // // Whenever the user explicitly chooses to respect the OS preference
  // // localStorage.removeItem("theme");

  //   Theme toggle logic
  const darkBtn = document.getElementById("dark");
  const lightBtn = document.getElementById("light");
  updateButtonVisibility();

  darkBtn?.addEventListener("click", function () {
    toggleTheme();
    updateButtonVisibility();
  });

  lightBtn?.addEventListener("click", function () {
    toggleTheme();
    updateButtonVisibility();
  });

  function updateButtonVisibility() {
    // Make the lightBtn button visible
    if (localStorage.theme === "dark") {
      lightBtn!.classList.remove("hidden");
      darkBtn!.classList.add("hidden");
    }
    // Make the darkBtn button visible
    if (localStorage.theme === "light") {
      darkBtn!.classList.remove("hidden");
      lightBtn!.classList.add("hidden");
    }
  }

  function toggleTheme() {
    if (document.documentElement.classList.contains("dark")) {
      document.documentElement.classList.remove("dark");
      localStorage.theme = "light";
    } else {
      document.documentElement.classList.add("dark");
      localStorage.theme = "dark";
    }
  }
</script>
